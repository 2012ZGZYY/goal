/** \page Workflows Open source FEM workflows and components

\tableofcontents

\section workflows_intro Introduction

In many workflow scenarios is is desirable to execute
every step of the simulation process using open source
software components. For instance, proprietary software
is sometimes difficult (or impossible) to install and
execute on existing high performance computers (HPCs),
and this issue will only be exacerbated by emerging HPC
architectures. Additionally, open source software
may be more easily modified for application-specific
behavior. In this document, we discuss open source
software components used in Goal and the role they
serve in a finite element analysis workflow.

\section workflows_components Software components

\subsection workflows_meshgen Geometric model creation and mesh generation

In practice, good open source mesh generation and geometric modeling
capabilities are difficult to find. [Gmsh][0] is an open source mesh
generator that has been routinely developed and supported for
nearly twenty years. In addition, Gmsh has basic geometric modeling
capabilities. While at SCOREC, a previous graduate student developed
a library called [Gmodel][1] to serve as a geometric preprocessor for
Gmsh. Gmodel allows users to create complex geometric input models
with much greater ease when compared to Gmsh's traditional interface.
Additionally, geometric model inputs generated by Gmodel maintain
correct geometric classification during the Gmsh meshing process.
Using Gmodel, complex geometries, such as a 10 by 10 array of
solder balls sandwiched between two films, have been generated
and subsequently meshed with Gmsh.

\subsection workflows_fem Finite element analysis

One aim of the Goal library is to facilitate the implementation
of parallel adaptive finite element application codes. To this end,
the Goal library is built primarily upon two software stacks:
[PUMI][2] and [Trilinos][3]. Goal utilizes many packages from
PUMI for its finite element assembly routines. From the PUMI
software stack, Goal uses the APF package for FEM basis
function information and parallel field storage capabilities,
the MDS package for a compact, array-based mesh data structure,
and  the PCU package for efficient parallel communications.
From the Trilinos software stack, Goal uses the Sacado
package for its forward automatic differentiation capabilities,
Phalanx for graph-based finite element assembly, Belos
for sparse linear algebra iterative solves, Ifpack2 for
ILU preconditioning, and MueLu for algebraic multigrid
preconditioning.

Because Goal is a library, users can potentially
bring in additional application-specific software components
to achieve specialized needs. It is also worth noting that the
mesh abstraction provided by the PUMI package APF allows different
underlying mesh databases to be used by Goal. In particular,
a coupled dislocation dynamics application that is utilizing
Goal currently uses the [Simmetrix][4] mesh database for its
underlying mesh data structure.

\subsection workflows_ma Mesh adaptation and solution transfer

The mesh adaptation and solution transfer in Goal is controlled
by the PUMI software package MeshAdapt. This package provides
robust, efficient, and scalable unstructured mesh adaptation
using sequences of edge splits, swaps, and collapses.
Additionally, the PUMI package ParMA is utilized to perform
diffusive load balancing before, during, and/or after mesh
adaptation occurs to maintain parallel partitioning
quality.

\subsection workflows_post Visualization and post-processing

Goal mainly uses [Paraview][5] for its visualization. Results
can be post-processed in Paraview. More complicated post-processing
procedures can be achieved by writing mesh files with fields
attached and then writing specific post-processing drivers
with the PUMI software tools.

\section workflows_dislocation Application to dislocation dynamics

Currently Goal, the Stanford developed dislocation
dynamics code [ParaDis][6], and the [Simmetrix][4] mesh
generation and services code and being used to implement
a coupling between finite element analysis and dislocation
dynamics. From a very high level, this coupling repeats
the following steps a large number of times
in memory on a parallel machine:

- dislocation node locations
- geometric model generation
- mesh generation
- FEM analysis modifies Peach-Koehler force
- ParaDis uses modified Peach-Koehler force to update node locations

Currently, Simmetrix geometric querying routines and mesh
generation routines are being used for the geometric model
and mesh generation steps.

Note: it may be possible to replace Simmetrix here
with Gmsh for a fully open source workflow, but the
geometric model and mesh generation would need to be
done in serial and with a file-based approach.

[0]:http://gmsh.info
[1]:https://github.com/ibaned/gmodel
[2]:https://github.com/SCOREC/core
[3]:https://github.com/Trilinos/Trilinos
[4]:http://www.simmetrix.com
[5]:http://www.paraview.org/
[6]:http://paradis.stanford.edu/

*/
